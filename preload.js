const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electron', {
    scanFiles: (params) => ipcRenderer.send('scan-files', params),
    onScanFilesSuccess: (callback) => ipcRenderer.on('scan-files-success', (event, files) => callback(files)),
    onScanFilesError: (callback) => ipcRenderer.on('scan-files-error', (event, message) => callback(message)),
    scanForNewFiles: () => ipcRenderer.send('scan-for-new'),
    onScanForNewFilesSuccess: (callback) => ipcRenderer.on('scan-for-new-success', (event, message) => callback(message)),
    onScanForNewFilesError: (callback) => ipcRenderer.on('scan-for-new-error', (event, message) => callback(message)),
    getGames: () => ipcRenderer.send('get-games'),
    onGetGamesSuccess: (callback) => ipcRenderer.on('get-games-success', (event, games) => callback(games)),
    onGetGamesError: (callback) => ipcRenderer.on('get-games-error', (event, message) => callback(message)),
    openFileLocation: (filePath) => ipcRenderer.send('open-file-location', filePath),
    copyToClipboard: (text) => ipcRenderer.send('copy-to-clipboard', text),
    getClipPath: () => ipcRenderer.send('get-clip-path'),
    onGetClipPathSuccess: (callback) => ipcRenderer.on('get-clip-path-success', (event, path) => callback(path)),
    onGetClipPathError: (callback) => ipcRenderer.on('get-clip-path-error', (event, message) => callback(message)),
    updateClipPath: (service, path) => ipcRenderer.send('update-clip-path', { service, path }),
    onUpdateClipPathSuccess: (callback) => ipcRenderer.on('update-clip-path-success', (event, path) => callback(path)),
    onUpdateClipPathError: (callback) => ipcRenderer.on('update-clip-path-error', (event, message) => callback(message)),
    onGetClipPath: (callback) => ipcRenderer.on('get-clip-path', (event, data) => callback(data)), 
    openClip: (service) => ipcRenderer.send('open-clip', service),
    openDataFolder: () => ipcRenderer.send('open-data-folder'),
    getAppInfo: () => ipcRenderer.send('get-appinfo'),
    onGetAppInfo: (callback) => ipcRenderer.on('get-appinfo', (event, data) => callback(data)),
    search: (query) => ipcRenderer.send('search', query),
    onSearchSuccess: (callback) => ipcRenderer.on('search-success', (event, data) => callback(data)),
    onSearchError: (callback) => ipcRenderer.on('search-error', (event, message) => callback(message)),
    updateApp: () => ipcRenderer.send('update-app'),
    onUpdateAvailable: (callback) => ipcRenderer.on('update-available', callback),
    openUrl: (url) => ipcRenderer.send('open-external', url),
    deleteClip: (service) => ipcRenderer.send('delete-clip', service),
    onDeleteClipSuccess: (callback) => ipcRenderer.on('delete-clip-success', (event, message) => callback(message)),
    onDeleteClipError: (callback) => ipcRenderer.on('delete-clip-error', (event, message) => callback(message)),
});
